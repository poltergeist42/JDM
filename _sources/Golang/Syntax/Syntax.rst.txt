===================
Détails syntaxiques
===================

.. index::
   single: Go Syntaxe
   single: Go; Go Syntaxe

.. contents::    :depth: 3
    :backlinks: top

####

--------------
Aperçu globale
--------------

:Liens_Web:
    * `Apprendre X en Y minutes`_ : Ensemble de code commentée en français permettant d'avoir un
      apperçu concis de l'ensemble des éléments de syntaxe du language.

.. _`Apprendre X en Y minutes`: https://learnxinyminutes.com/docs/fr-fr/go-fr/

####

------------
Basic Types 
------------

Il y a 17 types de bases et 2 alias :

    * bool

    * string

    * int  int8  int16  int32  int64
      uint uint8 uint16 uint32 uint64 uintptr

      .. note:: 

            **int** et **uint** doivent être utilisés par défaut sauf si une taille spécifique est
            necessaire. **int** et **unint** sont dépendent de la plateforme pour laquelle il sont
            compilé. Il pourrons donc être soit un int/uint32 soit un int/uint64.

    * byte 
    
      .. note:: 

            **byte** est un alias de uint8. Il est utilisé pour représenter un byte de données.

    * float32 float64

    * rune
    
      .. note::
        
            **rune** est un alias de int32. il est utiliser pour représenter un caractère Unicode.

    * complex64 complex128

    #. Literal Value Exemple

        +-----------+-----------------------------------------------------------+
        | Types     | Exemples                                                  |
        +===========+===========================================================+
        | int       | 20, -20.                                                  |
        |           | Values can also be expressed in hex (0x14), octal (0o24), |
        |           | and binary notation (0b0010100).                          |
        +-----------+-----------------------------------------------------------+
        | uint      | There are no unint literals. All literal whole numbers    |
        |           | are treated as int values.                                |
        +-----------+-----------------------------------------------------------+
        | byte      | There are no byte literals. Bytes are typically expressed |
        |           | as integer literals (such as 101) or run literals ('e')   |
        |           | since byte type is an alias for the unint8 type.          |
        +-----------+-----------------------------------------------------------+
        | float64   | 20.2, -20.2, 1.2e10, -1.2e10.                             |
        |           | Values can also be expressed in hex notation (0x2p10),    |
        |           | Altrough the exposant is expressed in decimal digits.     |
        +-----------+-----------------------------------------------------------+
        | bool      | true, false                                               |
        +-----------+-----------------------------------------------------------+
        | string    | "Hello". Character sequences escaped with a backslash are |
        |           | interpreted if the value is enclosed in double quotes     |
        |           | ("Hello\\n"). Escape sequences are not interpreted if the |
        |           | is enclosed backquotes (\`Hello\\n\`).                    |
        +-----------+-----------------------------------------------------------+
        | rune      | \'A\', \'\\n\', \'\\u00A5\', \'€\'.                       |
        |           | Characters glyphs, and escape sequences are enclosed in   |
        |           | single quotes.                                            |
        +-----------+-----------------------------------------------------------+

Conversion entre basic tpyes
============================

**Go** applique une règle stricte sur les conversions. Toutes les conversions doivent être
spécifiquement définie. Il n'est donc pas possible d'additionner un **int** avec un **float32**

    .. warning::

        **Impossible d'additionner des types différents**

        .. code:: go
            :number-lines:
            :force:
            
            func main() {
                const price int = 275
                const tax float32 = 27.50

                fmt.Println(price + tax)
            }

        *Results* :

        .. code:: go

            ./prog.go:8:14: invalid operation: price + tax (mismatched types int and float32)





####

----------
Constantes
----------

Les constantes se déclarent avec le mot clef **const**.

Il y a deux types de déclaration de constantes :

    * Les déclaration Typées

    * Les déclaration non-Typées

Constantes typées
=================

[WIP]


Constantes non-typées
=====================

[WIP]

####

---------
Accolades
---------

La première accolade doit être positionnée sur la même que l'élément au quel elles appartiennent.

Exemple pour une fonction :

    .. hint:: 
        
        **Bonne syntaxe**
        
        .. code:: go
            :number-lines:
            :force:

            func main() {
                fmt.Println("Hello, world")
            }

            // Results
            ==> Hello, world


    .. warning:: 
        
        **Mauvaise Syntaxe**

        .. code:: go
            :number-lines:
            :force:

            func main ()
            {
                fmt.Println("Hello, world")
            }

            // Results
            ==> ./prog.go:8:1: syntax error: unexpected semicolon or newline before {

####

-------
main.go
-------

Tous les projets doivent avoir un fichier "main.go". C'est le fichier principale du programme. Ce
fichier doit contenir une fonction "main()". C'est cette fonction qui est appellée lors de
l'éxécution du programme.


    .. code:: go

        // code minimum
        package main

        func main() {

        }

####

---------
Fonctions
---------

Une fonction peut être déclarée avec des prototypes plus ou moins complexes en fonction de si la
fonction reçoit des arguments, si elle retourne des arguments et si elle est lié à un struct ou à
un interface.

Forme simple
============

Cette forme ne prend pas d'argument, ne retourne rien et n'est pas liée à un autre élément.

  .. image:: ./images/simpleFunction.svg
        :width: 520 px
        :align: center

####

--------
Weblinks
--------

.. target-notes::